// Code generated by protoc-gen-go.
// source: srv/proto/stream.proto
// DO NOT EDIT!

/*
Package stream is a generated protocol buffer package.

It is generated from these files:
	srv/proto/stream.proto

It has these top-level messages:
	Request
	Response
*/
package stream

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Response struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*Response)(nil), "Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Streamer service

type StreamerClient interface {
	ServerStream(ctx context.Context, in *Request, opts ...client.CallOption) (Streamer_ServerStreamClient, error)
}

type streamerClient struct {
	c           client.Client
	serviceName string
}

func NewStreamerClient(serviceName string, c client.Client) StreamerClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "streamer"
	}
	return &streamerClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *streamerClient) ServerStream(ctx context.Context, in *Request, opts ...client.CallOption) (Streamer_ServerStreamClient, error) {
	req := c.c.NewRequest(c.serviceName, "Streamer.ServerStream", &Request{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &streamerServerStreamClient{stream}, nil
}

type Streamer_ServerStreamClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Response, error)
}

type streamerServerStreamClient struct {
	stream client.Streamer
}

func (x *streamerServerStreamClient) Close() error {
	return x.stream.Close()
}

func (x *streamerServerStreamClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *streamerServerStreamClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *streamerServerStreamClient) Recv() (*Response, error) {
	m := new(Response)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Streamer service

type StreamerHandler interface {
	ServerStream(context.Context, *Request, Streamer_ServerStreamStream) error
}

func RegisterStreamerHandler(s server.Server, hdlr StreamerHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Streamer{hdlr}, opts...))
}

type Streamer struct {
	StreamerHandler
}

func (h *Streamer) ServerStream(ctx context.Context, stream server.Streamer) error {
	m := new(Request)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.StreamerHandler.ServerStream(ctx, m, &streamerServerStreamStream{stream})
}

type Streamer_ServerStreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Response) error
}

type streamerServerStreamStream struct {
	stream server.Streamer
}

func (x *streamerServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *streamerServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *streamerServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *streamerServerStreamStream) Send(m *Response) error {
	return x.stream.Send(m)
}

func init() { proto.RegisterFile("srv/proto/stream.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x2e, 0x2a, 0xd3,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xd5, 0x03, 0x73, 0x94,
	0xe4, 0xb9, 0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x93, 0xf3,
	0x4b, 0xf3, 0x4a, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0x20, 0x1c, 0x25, 0x05, 0x2e, 0x8e,
	0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xec, 0x2a, 0x8c, 0x8c, 0xb9, 0x38, 0x82, 0xc1,
	0x46, 0xa6, 0x16, 0x09, 0xa9, 0x73, 0xf1, 0x04, 0xa7, 0x16, 0x95, 0xa5, 0x16, 0x41, 0x44, 0x84,
	0x38, 0xf4, 0xa0, 0xa6, 0x4b, 0x71, 0xea, 0xc1, 0x8c, 0x51, 0x62, 0x30, 0x60, 0x4c, 0x62, 0x03,
	0x5b, 0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xce, 0xda, 0x28, 0x98, 0x00, 0x00, 0x00,
}
